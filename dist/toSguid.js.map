{"version":3,"sources":["../src/toSguid.js"],"names":["toSguid","base64SecretKey","namespace","type","id","SguidError","payload","JSON","stringify","secretKey","message","nacl","sign"],"mappings":";;;;;;AAEA;;;;AACA;;AAKA;;AAGA;;;;AAXA;;AAkBA;;;;;;;;;AAMA,IAAMA,4BAAuB,SAAvBA,OAAuB,CAACC,eAAD,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAmCC,EAAnC,EAA0C;AACrE,MAAI,CAACF,SAAL,EAAgB;AACd,UAAM,IAAIG,kBAAJ,CAAe,mCAAf,CAAN;AACD;;AAED,MAAI,CAACF,IAAL,EAAW;AACT,UAAM,IAAIE,kBAAJ,CAAe,4CAAf,CAAN;AACD;;AAED,MAAI,CAACD,EAAL,EAAS;AACP,UAAM,IAAIC,kBAAJ,CAAe,6CAAf,CAAN;AACD;;AAED,MAAMC,UAAUC,KAAKC,SAAL,CAAe;AAC7BJ,MAD6B;AAE7BF,aAF6B;AAG7BC;AAH6B,GAAf,CAAhB;;AAMA,MAAMM,YAAY,iCAAaR,eAAb,CAAlB;AACA,MAAMS,UAAU,+BAAWJ,OAAX,CAAhB;;AAEA,SAAO,uBAAU,iCAAaK,oBAAKC,IAAL,CAAUF,OAAV,EAAmBD,SAAnB,CAAb,CAAV,CAAP;AACD,CAvBD;;kBAyBeT,O","file":"toSguid.js","sourcesContent":["// @flow\r\n\r\nimport nacl from 'tweetnacl';\r\nimport {\r\n  decodeBase64,\r\n  decodeUTF8,\r\n  encodeBase64\r\n} from 'tweetnacl-util';\r\nimport {\r\n  escape as urlEscape\r\n} from 'base64-url';\r\nimport {\r\n  SguidError\r\n} from './errors';\r\nimport type {\r\n  ToSguidType\r\n} from './types';\r\n\r\n/**\r\n * @param base64SecretKey {@see https://github.com/gajus/sguid#generating-key-pair}\r\n * @param namespace A namespace of the GUID (e.g. company name or the application name).\r\n * @param type A resource type name (e.g. article).\r\n * @param id Resource identifier.\r\n */\r\nconst toSguid: ToSguidType = (base64SecretKey, namespace, type, id) => {\r\n  if (!namespace) {\r\n    throw new SguidError('Namespace values cannot be falsy.');\r\n  }\r\n\r\n  if (!type) {\r\n    throw new SguidError('Resource type name values cannot be falsy.');\r\n  }\r\n\r\n  if (!id) {\r\n    throw new SguidError('Resource identifier values cannot be falsy.');\r\n  }\r\n\r\n  const payload = JSON.stringify({\r\n    id,\r\n    namespace,\r\n    type\r\n  });\r\n\r\n  const secretKey = decodeBase64(base64SecretKey);\r\n  const message = decodeUTF8(payload);\r\n\r\n  return urlEscape(encodeBase64(nacl.sign(message, secretKey)));\r\n};\r\n\r\nexport default toSguid;\r\n"]}