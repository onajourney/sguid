{"version":3,"sources":["../src/fromSguid.js"],"names":["fromSguid","base64PublicKey","expectedNamespace","expectedResourceTypeName","sguid","payload","nacl","sign","open","JSON","parse","error","InvalidSguidError","namespace","UnexpectedNamespaceValueError","type","UnexpectedResourceTypeNameValueError","id"],"mappings":";;;;;;AAEA;;;;AACA;;AAIA;;AAGA;;;;AAVA;;AAmBA;;;;;;;;AAKA,IAAMA,gCAA2B,SAA3BA,SAA2B,CAACC,eAAD,EAAkBC,iBAAlB,EAAqCC,wBAArC,EAA+DC,KAA/D,EAAyE;AACxG,MAAIC,gBAAJ;;AAEA,MAAI;AACFA,cAAUC,oBAAKC,IAAL,CAAUC,IAAV,CAAe,iCAAa,yBAAYJ,KAAZ,CAAb,CAAf,EAAiD,iCAAa,yBAAYH,eAAZ,CAAb,CAAjD,CAAV;;AAEA,QAAII,YAAY,IAAhB,EAAsB;AACpBA,gBAAUI,KAAKC,KAAL,CAAW,+BAAWL,OAAX,CAAX,CAAV;AACD;AACF,GAND,CAME,OAAOM,KAAP,EAAc;AACd,UAAM,IAAIC,yBAAJ,CAAsBR,KAAtB,CAAN;AACD;;AAED,MAAIC,YAAY,IAAhB,EAAsB;AACpB,UAAM,IAAIO,yBAAJ,CAAsBR,KAAtB,CAAN;AACD;;AAED,MAAIF,sBAAsBG,QAAQQ,SAAlC,EAA6C;AAC3C,UAAM,IAAIC,qCAAJ,CAAkCV,KAAlC,EAAyCF,iBAAzC,EAA4DC,wBAA5D,EAAsFE,OAAtF,CAAN;AACD;;AAED,MAAIF,6BAA6BE,QAAQU,IAAzC,EAA+C;AAC7C,UAAM,IAAIC,4CAAJ,CAAyCZ,KAAzC,EAAgDF,iBAAhD,EAAmEC,wBAAnE,EAA6FE,OAA7F,CAAN;AACD;;AAED,SAAO;AACLY,QAAIZ,QAAQY,EADP;AAELJ,eAAWR,QAAQQ,SAFd;AAGLE,UAAMV,QAAQU;AAHT,GAAP;AAKD,CA9BD;;kBAgCef,S","file":"fromSguid.js","sourcesContent":["// @flow\r\n\r\nimport nacl from 'tweetnacl';\r\nimport {\r\n  decodeBase64,\r\n  encodeUTF8\r\n} from 'tweetnacl-util';\r\nimport {\r\n  unescape as urlUnescape\r\n} from 'base64-url';\r\nimport {\r\n  InvalidSguidError,\r\n  UnexpectedNamespaceValueError,\r\n  UnexpectedResourceTypeNameValueError\r\n} from './errors';\r\nimport type {\r\n  FromSguidType\r\n} from './types';\r\n\r\n/**\r\n * @throws InvalidSguidError Throws if signed message cannot be opened.\r\n * @throws UnexpectedNamespaceValueError Throws if the namespace contained in the payload does not match the expected namespace.\r\n * @throws UnexpectedResourceTypeNameValueError Throws if the resource type name contained in the payload does not match the expected resource type name.\r\n */\r\nconst fromSguid: FromSguidType = (base64PublicKey, expectedNamespace, expectedResourceTypeName, sguid) => {\r\n  let payload;\r\n\r\n  try {\r\n    payload = nacl.sign.open(decodeBase64(urlUnescape(sguid)), decodeBase64(urlUnescape(base64PublicKey)));\r\n\r\n    if (payload !== null) {\r\n      payload = JSON.parse(encodeUTF8(payload));\r\n    }\r\n  } catch (error) {\r\n    throw new InvalidSguidError(sguid);\r\n  }\r\n\r\n  if (payload === null) {\r\n    throw new InvalidSguidError(sguid);\r\n  }\r\n\r\n  if (expectedNamespace !== payload.namespace) {\r\n    throw new UnexpectedNamespaceValueError(sguid, expectedNamespace, expectedResourceTypeName, payload);\r\n  }\r\n\r\n  if (expectedResourceTypeName !== payload.type) {\r\n    throw new UnexpectedResourceTypeNameValueError(sguid, expectedNamespace, expectedResourceTypeName, payload);\r\n  }\r\n\r\n  return {\r\n    id: payload.id,\r\n    namespace: payload.namespace,\r\n    type: payload.type\r\n  };\r\n};\r\n\r\nexport default fromSguid;\r\n"]}